chmod：更改文件9个属性
Linux文件属性有两种设置方法，一种是数字，一种是符号。

Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。

先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：

r:4
w:2
x:1
每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx---] 分数则是：

owner = rwx = 4+2+1 = 7
group = rwx = 4+2+1 = 7
others= --- = 0+0+0 = 0



Linux Shell 一定要注意空格
Shell 数组
数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。
与大部分编程语言类似，数组元素的下标由0开始。
Shell 数组用括号来表示，元素用"空格"符号分割开
在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。
读取数组元素值的一般格式是：

${数组名[下标]}
使用 @ 符号可以获取数组中的所有元素，例如：

echo ${array_name[@]}

数组中元素的类型可以是不同的

以 # 开头的行就是注释，会被解释器忽略。

通过每一行加一个 # 号设置多行注释
多行注释
:<<xxx
注释内容...
注释内容...
注释内容...
xxx


$* 与 $@ 区别：

相同点：都是引用所有参数。
不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。

$* 的输出是将所有传入的参数看成一个整体 "1 2 3"（一个参数）
$@ 的输出是将所有传入的参数分别看作一个变量  "1" "2" "3"（三个参数）



原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。

expr 是一款表达式计算工具，使用它能完成表达式的求值操作。(注意使用的是反引号 ` 而不是单引号 ')
var1=3;
var2=4;
a="var1+var2";
b=`expr $var1 + $var2`;注意变量之间要加空格
echo $a;
echo $b;


关系运算符只支持数字，不支持字符串，除非字符串的值是数字。

下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：

	运算符		说明	                                               		举例
	-eq			检测两个数是否相等，相等返回 true。	                        [ $a -eq $b ] 返回 false。
	-ne			检测两个数是否不相等，不相等返回 true。						[ $a -ne $b ] 返回 true。
	-gt			检测左边的数是否大于右边的，如果是，则返回 true。			[ $a -gt $b ] 返回 false。
	-lt			检测左边的数是否小于右边的，如果是，则返回 true。			[ $a -lt $b ] 返回 true。
	-ge			检测左边的数是否大于等于右边的，如果是，则返回 true。		[ $a -ge $b ] 返回 false。
	-le			检测左边的数是否小于等于右边的，如果是，则返回 true。		[ $a -le $b ] 返回 true。




	布尔运算符
	下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：

	运算符		说明													举例
	!			非运算，表达式为 true 则返回 false，否则返回 true。		[ ! false ] 返回 true。
	-o			或运算，有一个表达式为 true 则返回 true。				[ $a -lt 20 -o $b -gt 100 ] 返回 true。
	-a			与运算，两个表达式都为 true 才返回 true。				[ $a -lt 20 -a $b -gt 100 ] 返回 false。


linux 流程控制语句中都需要加结束符，结束符通常和起始符相反如：if---fi case ---esac  
									循环为：for do---done
									        while do---done

if else语句结尾要加fi 注意条件语句中的空格
		if [ 条件 ]
		then
		...
		else
		...
		fi

		if else - if else

		if [ 条件 ]
		then
		...
		elif [ 条件2 ]
		then
		...
		else
		...
		fi

for 循环
		与其他编程语言类似，Shell支持for循环。

		for循环一般格式为：

		for var in item1 item2 ... itemN    数组记得加[@]等表示
		do
			command1
			command2
			...
			commandN
		done


case语句

		case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。
		echo '输入 1 到 4 之间的数字:'
		echo '你输入的数字为:'
		read aNum
		case $aNum in
			1)  echo '你选择了 1'
			;;
			2)  echo '你选择了 2'
			;;
			3)  echo '你选择了 3'
			;;
			4)  echo '你选择了 4'
			;;
			*)  echo '你没有输入 1 到 4 之间的数字'
			;;
		esac
所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。
在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...


















































